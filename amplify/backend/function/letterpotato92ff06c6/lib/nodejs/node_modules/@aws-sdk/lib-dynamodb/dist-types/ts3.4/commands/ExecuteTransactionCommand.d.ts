import {
  ExecuteTransactionCommand as __ExecuteTransactionCommand,
  ExecuteTransactionCommandInput as __ExecuteTransactionCommandInput,
  ExecuteTransactionCommandOutput as __ExecuteTransactionCommandOutput,
  ItemResponse,
  ParameterizedStatement,
} from "@aws-sdk/client-dynamodb";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MiddlewareStack,
} from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientCommand } from "../baseCommand/DynamoDBDocumentClientCommand";
import {
  DynamoDBDocumentClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../DynamoDBDocumentClient";
export declare type ExecuteTransactionCommandInput = Pick<
  __ExecuteTransactionCommandInput,
  Exclude<keyof __ExecuteTransactionCommandInput, "TransactStatements">
> & {
  TransactStatements:
    | (Pick<
        ParameterizedStatement,
        Exclude<keyof ParameterizedStatement, "Parameters">
      > & {
        Parameters?: NativeAttributeValue[];
      })[]
    | undefined;
};
export declare type ExecuteTransactionCommandOutput = Pick<
  __ExecuteTransactionCommandOutput,
  Exclude<keyof __ExecuteTransactionCommandOutput, "Responses">
> & {
  Responses?: (Pick<ItemResponse, Exclude<keyof ItemResponse, "Item">> & {
    Item?: Record<string, NativeAttributeValue>;
  })[];
};
export declare class ExecuteTransactionCommand extends DynamoDBDocumentClientCommand<
  ExecuteTransactionCommandInput,
  ExecuteTransactionCommandOutput,
  __ExecuteTransactionCommandInput,
  __ExecuteTransactionCommandOutput,
  DynamoDBDocumentClientResolvedConfig
> {
  readonly input: ExecuteTransactionCommandInput;
  protected readonly inputKeyNodes: {
    key: string;
    children: {
      key: string;
    }[];
  }[];
  protected readonly outputKeyNodes: {
    key: string;
    children: {
      key: string;
    }[];
  }[];
  protected readonly clientCommand: __ExecuteTransactionCommand;
  readonly middlewareStack: MiddlewareStack<
    ExecuteTransactionCommandInput | __ExecuteTransactionCommandInput,
    ExecuteTransactionCommandOutput | __ExecuteTransactionCommandOutput
  >;
  constructor(input: ExecuteTransactionCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: DynamoDBDocumentClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<ExecuteTransactionCommandInput, ExecuteTransactionCommandOutput>;
}
