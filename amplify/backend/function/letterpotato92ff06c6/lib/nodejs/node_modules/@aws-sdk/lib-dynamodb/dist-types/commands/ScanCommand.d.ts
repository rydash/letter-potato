import { Condition, ScanCommand as __ScanCommand, ScanCommandInput as __ScanCommandInput, ScanCommandOutput as __ScanCommandOutput } from "@aws-sdk/client-dynamodb";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MiddlewareStack } from "@aws-sdk/types";
import { NativeAttributeValue } from "@aws-sdk/util-dynamodb";
import { DynamoDBDocumentClientCommand } from "../baseCommand/DynamoDBDocumentClientCommand";
import { DynamoDBDocumentClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBDocumentClient";
export declare type ScanCommandInput = Omit<__ScanCommandInput, "ScanFilter" | "ExclusiveStartKey" | "ExpressionAttributeValues"> & {
    ScanFilter?: Record<string, Omit<Condition, "AttributeValueList"> & {
        AttributeValueList?: NativeAttributeValue[];
    }>;
    ExclusiveStartKey?: Record<string, NativeAttributeValue>;
    ExpressionAttributeValues?: Record<string, NativeAttributeValue>;
};
export declare type ScanCommandOutput = Omit<__ScanCommandOutput, "Items" | "LastEvaluatedKey"> & {
    Items?: Record<string, NativeAttributeValue>[];
    LastEvaluatedKey?: Record<string, NativeAttributeValue>;
};
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * ScanCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
export declare class ScanCommand extends DynamoDBDocumentClientCommand<ScanCommandInput, ScanCommandOutput, __ScanCommandInput, __ScanCommandOutput, DynamoDBDocumentClientResolvedConfig> {
    readonly input: ScanCommandInput;
    protected readonly inputKeyNodes: ({
        key: string;
        children: {
            children: {
                key: string;
            }[];
        };
    } | {
        key: string;
        children?: undefined;
    })[];
    protected readonly outputKeyNodes: {
        key: string;
    }[];
    protected readonly clientCommand: __ScanCommand;
    readonly middlewareStack: MiddlewareStack<ScanCommandInput | __ScanCommandInput, ScanCommandOutput | __ScanCommandOutput>;
    constructor(input: ScanCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBDocumentClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ScanCommandInput, ScanCommandOutput>;
}
